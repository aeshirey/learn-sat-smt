; functions for colors:
(declare-fun blue (Int) Bool)
(declare-fun green (Int) Bool)
(declare-fun red (Int) Bool)
(declare-fun white (Int) Bool)
(declare-fun yellow (Int) Bool)

; functions for nationalities:
(declare-fun brit (Int) Bool)
(declare-fun dane (Int) Bool)
(declare-fun german (Int) Bool)
(declare-fun norwegian (Int) Bool)
(declare-fun swede (Int) Bool)

; functions for beverage:
(declare-fun beer (Int) Bool)
(declare-fun coffee (Int) Bool)
(declare-fun milk (Int) Bool)
(declare-fun tea (Int) Bool)
(declare-fun water (Int) Bool)

; functions for cigar:
(declare-fun bluemaster (Int) Bool)
(declare-fun dunhill (Int) Bool)
(declare-fun pallmall (Int) Bool)
(declare-fun prince (Int) Bool)
(declare-fun blend (Int) Bool)

; functions for pet:
(declare-fun cat (Int) Bool)
(declare-fun bird (Int) Bool)
(declare-fun dog (Int) Bool)
(declare-fun fish (Int) Bool)
(declare-fun horse (Int) Bool)

; at least one blue house
(assert (or (blue 1) (blue 2) (blue 3) (blue 4) (blue 5)))
; but not more than one blue house
(assert (not (and (blue 1) (blue 2))))
(assert (not (and (blue 1) (blue 3))))
(assert (not (and (blue 1) (blue 4))))
(assert (not (and (blue 1) (blue 5))))
(assert (not (and (blue 2) (blue 3))))
(assert (not (and (blue 2) (blue 4))))
(assert (not (and (blue 2) (blue 5))))
(assert (not (and (blue 3) (blue 4))))
(assert (not (and (blue 3) (blue 5))))
(assert (not (and (blue 4) (blue 5))))

; at least one green house
(assert (or (green 1) (green 2) (green 3) (green 4) (green 5)))
; but not more than one green house
(assert (not (and (green 1) (green 2))))
(assert (not (and (green 1) (green 3))))
(assert (not (and (green 1) (green 4))))
(assert (not (and (green 1) (green 5))))
(assert (not (and (green 2) (green 3))))
(assert (not (and (green 2) (green 4))))
(assert (not (and (green 2) (green 5))))
(assert (not (and (green 3) (green 4))))
(assert (not (and (green 3) (green 5))))
(assert (not (and (green 4) (green 5))))

; at least one red house
(assert (or (red 1) (red 2) (red 3) (red 4) (red 5)))
; but not more than one red house
(assert (not (and (red 1) (red 2))))
(assert (not (and (red 1) (red 3))))
(assert (not (and (red 1) (red 4))))
(assert (not (and (red 1) (red 5))))
(assert (not (and (red 2) (red 3))))
(assert (not (and (red 2) (red 4))))
(assert (not (and (red 2) (red 5))))
(assert (not (and (red 3) (red 4))))
(assert (not (and (red 3) (red 5))))
(assert (not (and (red 4) (red 5))))

; at least one white house
(assert (or (white 1) (white 2) (white 3) (white 4) (white 5)))
; but not more than one white house
(assert (not (and (white 1) (white 2))))
(assert (not (and (white 1) (white 3))))
(assert (not (and (white 1) (white 4))))
(assert (not (and (white 1) (white 5))))
(assert (not (and (white 2) (white 3))))
(assert (not (and (white 2) (white 4))))
(assert (not (and (white 2) (white 5))))
(assert (not (and (white 3) (white 4))))
(assert (not (and (white 3) (white 5))))
(assert (not (and (white 4) (white 5))))

; at least one yellow house
(assert (or (yellow 1) (yellow 2) (yellow 3) (yellow 4) (yellow 5)))
; but not more than one yellow house
(assert (not (and (yellow 1) (yellow 2))))
(assert (not (and (yellow 1) (yellow 3))))
(assert (not (and (yellow 1) (yellow 4))))
(assert (not (and (yellow 1) (yellow 5))))
(assert (not (and (yellow 2) (yellow 3))))
(assert (not (and (yellow 2) (yellow 4))))
(assert (not (and (yellow 2) (yellow 5))))
(assert (not (and (yellow 3) (yellow 4))))
(assert (not (and (yellow 3) (yellow 5))))
(assert (not (and (yellow 4) (yellow 5))))

; A house can only match one colors proposition
(assert (not (and (blue 1) (green 1))))
(assert (not (and (blue 2) (green 2))))
(assert (not (and (blue 3) (green 3))))
(assert (not (and (blue 4) (green 4))))
(assert (not (and (blue 5) (green 5))))
(assert (not (and (blue 1) (red 1))))
(assert (not (and (blue 2) (red 2))))
(assert (not (and (blue 3) (red 3))))
(assert (not (and (blue 4) (red 4))))
(assert (not (and (blue 5) (red 5))))
(assert (not (and (blue 1) (white 1))))
(assert (not (and (blue 2) (white 2))))
(assert (not (and (blue 3) (white 3))))
(assert (not (and (blue 4) (white 4))))
(assert (not (and (blue 5) (white 5))))
(assert (not (and (blue 1) (yellow 1))))
(assert (not (and (blue 2) (yellow 2))))
(assert (not (and (blue 3) (yellow 3))))
(assert (not (and (blue 4) (yellow 4))))
(assert (not (and (blue 5) (yellow 5))))
(assert (not (and (green 1) (blue 1))))
(assert (not (and (green 2) (blue 2))))
(assert (not (and (green 3) (blue 3))))
(assert (not (and (green 4) (blue 4))))
(assert (not (and (green 5) (blue 5))))
(assert (not (and (green 1) (red 1))))
(assert (not (and (green 2) (red 2))))
(assert (not (and (green 3) (red 3))))
(assert (not (and (green 4) (red 4))))
(assert (not (and (green 5) (red 5))))
(assert (not (and (green 1) (white 1))))
(assert (not (and (green 2) (white 2))))
(assert (not (and (green 3) (white 3))))
(assert (not (and (green 4) (white 4))))
(assert (not (and (green 5) (white 5))))
(assert (not (and (green 1) (yellow 1))))
(assert (not (and (green 2) (yellow 2))))
(assert (not (and (green 3) (yellow 3))))
(assert (not (and (green 4) (yellow 4))))
(assert (not (and (green 5) (yellow 5))))
(assert (not (and (red 1) (blue 1))))
(assert (not (and (red 2) (blue 2))))
(assert (not (and (red 3) (blue 3))))
(assert (not (and (red 4) (blue 4))))
(assert (not (and (red 5) (blue 5))))
(assert (not (and (red 1) (green 1))))
(assert (not (and (red 2) (green 2))))
(assert (not (and (red 3) (green 3))))
(assert (not (and (red 4) (green 4))))
(assert (not (and (red 5) (green 5))))
(assert (not (and (red 1) (white 1))))
(assert (not (and (red 2) (white 2))))
(assert (not (and (red 3) (white 3))))
(assert (not (and (red 4) (white 4))))
(assert (not (and (red 5) (white 5))))
(assert (not (and (red 1) (yellow 1))))
(assert (not (and (red 2) (yellow 2))))
(assert (not (and (red 3) (yellow 3))))
(assert (not (and (red 4) (yellow 4))))
(assert (not (and (red 5) (yellow 5))))
(assert (not (and (white 1) (blue 1))))
(assert (not (and (white 2) (blue 2))))
(assert (not (and (white 3) (blue 3))))
(assert (not (and (white 4) (blue 4))))
(assert (not (and (white 5) (blue 5))))
(assert (not (and (white 1) (green 1))))
(assert (not (and (white 2) (green 2))))
(assert (not (and (white 3) (green 3))))
(assert (not (and (white 4) (green 4))))
(assert (not (and (white 5) (green 5))))
(assert (not (and (white 1) (red 1))))
(assert (not (and (white 2) (red 2))))
(assert (not (and (white 3) (red 3))))
(assert (not (and (white 4) (red 4))))
(assert (not (and (white 5) (red 5))))
(assert (not (and (white 1) (yellow 1))))
(assert (not (and (white 2) (yellow 2))))
(assert (not (and (white 3) (yellow 3))))
(assert (not (and (white 4) (yellow 4))))
(assert (not (and (white 5) (yellow 5))))
(assert (not (and (yellow 1) (blue 1))))
(assert (not (and (yellow 2) (blue 2))))
(assert (not (and (yellow 3) (blue 3))))
(assert (not (and (yellow 4) (blue 4))))
(assert (not (and (yellow 5) (blue 5))))
(assert (not (and (yellow 1) (green 1))))
(assert (not (and (yellow 2) (green 2))))
(assert (not (and (yellow 3) (green 3))))
(assert (not (and (yellow 4) (green 4))))
(assert (not (and (yellow 5) (green 5))))
(assert (not (and (yellow 1) (red 1))))
(assert (not (and (yellow 2) (red 2))))
(assert (not (and (yellow 3) (red 3))))
(assert (not (and (yellow 4) (red 4))))
(assert (not (and (yellow 5) (red 5))))
(assert (not (and (yellow 1) (white 1))))
(assert (not (and (yellow 2) (white 2))))
(assert (not (and (yellow 3) (white 3))))
(assert (not (and (yellow 4) (white 4))))
(assert (not (and (yellow 5) (white 5))))

; at least one brit house
(assert (or (brit 1) (brit 2) (brit 3) (brit 4) (brit 5)))
; but not more than one brit house
(assert (not (and (brit 1) (brit 2))))
(assert (not (and (brit 1) (brit 3))))
(assert (not (and (brit 1) (brit 4))))
(assert (not (and (brit 1) (brit 5))))
(assert (not (and (brit 2) (brit 3))))
(assert (not (and (brit 2) (brit 4))))
(assert (not (and (brit 2) (brit 5))))
(assert (not (and (brit 3) (brit 4))))
(assert (not (and (brit 3) (brit 5))))
(assert (not (and (brit 4) (brit 5))))

; at least one dane house
(assert (or (dane 1) (dane 2) (dane 3) (dane 4) (dane 5)))
; but not more than one dane house
(assert (not (and (dane 1) (dane 2))))
(assert (not (and (dane 1) (dane 3))))
(assert (not (and (dane 1) (dane 4))))
(assert (not (and (dane 1) (dane 5))))
(assert (not (and (dane 2) (dane 3))))
(assert (not (and (dane 2) (dane 4))))
(assert (not (and (dane 2) (dane 5))))
(assert (not (and (dane 3) (dane 4))))
(assert (not (and (dane 3) (dane 5))))
(assert (not (and (dane 4) (dane 5))))

; at least one german house
(assert (or (german 1) (german 2) (german 3) (german 4) (german 5)))
; but not more than one german house
(assert (not (and (german 1) (german 2))))
(assert (not (and (german 1) (german 3))))
(assert (not (and (german 1) (german 4))))
(assert (not (and (german 1) (german 5))))
(assert (not (and (german 2) (german 3))))
(assert (not (and (german 2) (german 4))))
(assert (not (and (german 2) (german 5))))
(assert (not (and (german 3) (german 4))))
(assert (not (and (german 3) (german 5))))
(assert (not (and (german 4) (german 5))))

; at least one norwegian house
(assert (or (norwegian 1) (norwegian 2) (norwegian 3) (norwegian 4) (norwegian 5)))
; but not more than one norwegian house
(assert (not (and (norwegian 1) (norwegian 2))))
(assert (not (and (norwegian 1) (norwegian 3))))
(assert (not (and (norwegian 1) (norwegian 4))))
(assert (not (and (norwegian 1) (norwegian 5))))
(assert (not (and (norwegian 2) (norwegian 3))))
(assert (not (and (norwegian 2) (norwegian 4))))
(assert (not (and (norwegian 2) (norwegian 5))))
(assert (not (and (norwegian 3) (norwegian 4))))
(assert (not (and (norwegian 3) (norwegian 5))))
(assert (not (and (norwegian 4) (norwegian 5))))

; at least one swede house
(assert (or (swede 1) (swede 2) (swede 3) (swede 4) (swede 5)))
; but not more than one swede house
(assert (not (and (swede 1) (swede 2))))
(assert (not (and (swede 1) (swede 3))))
(assert (not (and (swede 1) (swede 4))))
(assert (not (and (swede 1) (swede 5))))
(assert (not (and (swede 2) (swede 3))))
(assert (not (and (swede 2) (swede 4))))
(assert (not (and (swede 2) (swede 5))))
(assert (not (and (swede 3) (swede 4))))
(assert (not (and (swede 3) (swede 5))))
(assert (not (and (swede 4) (swede 5))))

; A house can only match one nationalities proposition
(assert (not (and (brit 1) (dane 1))))
(assert (not (and (brit 2) (dane 2))))
(assert (not (and (brit 3) (dane 3))))
(assert (not (and (brit 4) (dane 4))))
(assert (not (and (brit 5) (dane 5))))
(assert (not (and (brit 1) (german 1))))
(assert (not (and (brit 2) (german 2))))
(assert (not (and (brit 3) (german 3))))
(assert (not (and (brit 4) (german 4))))
(assert (not (and (brit 5) (german 5))))
(assert (not (and (brit 1) (norwegian 1))))
(assert (not (and (brit 2) (norwegian 2))))
(assert (not (and (brit 3) (norwegian 3))))
(assert (not (and (brit 4) (norwegian 4))))
(assert (not (and (brit 5) (norwegian 5))))
(assert (not (and (brit 1) (swede 1))))
(assert (not (and (brit 2) (swede 2))))
(assert (not (and (brit 3) (swede 3))))
(assert (not (and (brit 4) (swede 4))))
(assert (not (and (brit 5) (swede 5))))
(assert (not (and (dane 1) (brit 1))))
(assert (not (and (dane 2) (brit 2))))
(assert (not (and (dane 3) (brit 3))))
(assert (not (and (dane 4) (brit 4))))
(assert (not (and (dane 5) (brit 5))))
(assert (not (and (dane 1) (german 1))))
(assert (not (and (dane 2) (german 2))))
(assert (not (and (dane 3) (german 3))))
(assert (not (and (dane 4) (german 4))))
(assert (not (and (dane 5) (german 5))))
(assert (not (and (dane 1) (norwegian 1))))
(assert (not (and (dane 2) (norwegian 2))))
(assert (not (and (dane 3) (norwegian 3))))
(assert (not (and (dane 4) (norwegian 4))))
(assert (not (and (dane 5) (norwegian 5))))
(assert (not (and (dane 1) (swede 1))))
(assert (not (and (dane 2) (swede 2))))
(assert (not (and (dane 3) (swede 3))))
(assert (not (and (dane 4) (swede 4))))
(assert (not (and (dane 5) (swede 5))))
(assert (not (and (german 1) (brit 1))))
(assert (not (and (german 2) (brit 2))))
(assert (not (and (german 3) (brit 3))))
(assert (not (and (german 4) (brit 4))))
(assert (not (and (german 5) (brit 5))))
(assert (not (and (german 1) (dane 1))))
(assert (not (and (german 2) (dane 2))))
(assert (not (and (german 3) (dane 3))))
(assert (not (and (german 4) (dane 4))))
(assert (not (and (german 5) (dane 5))))
(assert (not (and (german 1) (norwegian 1))))
(assert (not (and (german 2) (norwegian 2))))
(assert (not (and (german 3) (norwegian 3))))
(assert (not (and (german 4) (norwegian 4))))
(assert (not (and (german 5) (norwegian 5))))
(assert (not (and (german 1) (swede 1))))
(assert (not (and (german 2) (swede 2))))
(assert (not (and (german 3) (swede 3))))
(assert (not (and (german 4) (swede 4))))
(assert (not (and (german 5) (swede 5))))
(assert (not (and (norwegian 1) (brit 1))))
(assert (not (and (norwegian 2) (brit 2))))
(assert (not (and (norwegian 3) (brit 3))))
(assert (not (and (norwegian 4) (brit 4))))
(assert (not (and (norwegian 5) (brit 5))))
(assert (not (and (norwegian 1) (dane 1))))
(assert (not (and (norwegian 2) (dane 2))))
(assert (not (and (norwegian 3) (dane 3))))
(assert (not (and (norwegian 4) (dane 4))))
(assert (not (and (norwegian 5) (dane 5))))
(assert (not (and (norwegian 1) (german 1))))
(assert (not (and (norwegian 2) (german 2))))
(assert (not (and (norwegian 3) (german 3))))
(assert (not (and (norwegian 4) (german 4))))
(assert (not (and (norwegian 5) (german 5))))
(assert (not (and (norwegian 1) (swede 1))))
(assert (not (and (norwegian 2) (swede 2))))
(assert (not (and (norwegian 3) (swede 3))))
(assert (not (and (norwegian 4) (swede 4))))
(assert (not (and (norwegian 5) (swede 5))))
(assert (not (and (swede 1) (brit 1))))
(assert (not (and (swede 2) (brit 2))))
(assert (not (and (swede 3) (brit 3))))
(assert (not (and (swede 4) (brit 4))))
(assert (not (and (swede 5) (brit 5))))
(assert (not (and (swede 1) (dane 1))))
(assert (not (and (swede 2) (dane 2))))
(assert (not (and (swede 3) (dane 3))))
(assert (not (and (swede 4) (dane 4))))
(assert (not (and (swede 5) (dane 5))))
(assert (not (and (swede 1) (german 1))))
(assert (not (and (swede 2) (german 2))))
(assert (not (and (swede 3) (german 3))))
(assert (not (and (swede 4) (german 4))))
(assert (not (and (swede 5) (german 5))))
(assert (not (and (swede 1) (norwegian 1))))
(assert (not (and (swede 2) (norwegian 2))))
(assert (not (and (swede 3) (norwegian 3))))
(assert (not (and (swede 4) (norwegian 4))))
(assert (not (and (swede 5) (norwegian 5))))

; at least one beer house
(assert (or (beer 1) (beer 2) (beer 3) (beer 4) (beer 5)))
; but not more than one beer house
(assert (not (and (beer 1) (beer 2))))
(assert (not (and (beer 1) (beer 3))))
(assert (not (and (beer 1) (beer 4))))
(assert (not (and (beer 1) (beer 5))))
(assert (not (and (beer 2) (beer 3))))
(assert (not (and (beer 2) (beer 4))))
(assert (not (and (beer 2) (beer 5))))
(assert (not (and (beer 3) (beer 4))))
(assert (not (and (beer 3) (beer 5))))
(assert (not (and (beer 4) (beer 5))))

; at least one coffee house
(assert (or (coffee 1) (coffee 2) (coffee 3) (coffee 4) (coffee 5)))
; but not more than one coffee house
(assert (not (and (coffee 1) (coffee 2))))
(assert (not (and (coffee 1) (coffee 3))))
(assert (not (and (coffee 1) (coffee 4))))
(assert (not (and (coffee 1) (coffee 5))))
(assert (not (and (coffee 2) (coffee 3))))
(assert (not (and (coffee 2) (coffee 4))))
(assert (not (and (coffee 2) (coffee 5))))
(assert (not (and (coffee 3) (coffee 4))))
(assert (not (and (coffee 3) (coffee 5))))
(assert (not (and (coffee 4) (coffee 5))))

; at least one milk house
(assert (or (milk 1) (milk 2) (milk 3) (milk 4) (milk 5)))
; but not more than one milk house
(assert (not (and (milk 1) (milk 2))))
(assert (not (and (milk 1) (milk 3))))
(assert (not (and (milk 1) (milk 4))))
(assert (not (and (milk 1) (milk 5))))
(assert (not (and (milk 2) (milk 3))))
(assert (not (and (milk 2) (milk 4))))
(assert (not (and (milk 2) (milk 5))))
(assert (not (and (milk 3) (milk 4))))
(assert (not (and (milk 3) (milk 5))))
(assert (not (and (milk 4) (milk 5))))

; at least one tea house
(assert (or (tea 1) (tea 2) (tea 3) (tea 4) (tea 5)))
; but not more than one tea house
(assert (not (and (tea 1) (tea 2))))
(assert (not (and (tea 1) (tea 3))))
(assert (not (and (tea 1) (tea 4))))
(assert (not (and (tea 1) (tea 5))))
(assert (not (and (tea 2) (tea 3))))
(assert (not (and (tea 2) (tea 4))))
(assert (not (and (tea 2) (tea 5))))
(assert (not (and (tea 3) (tea 4))))
(assert (not (and (tea 3) (tea 5))))
(assert (not (and (tea 4) (tea 5))))

; at least one water house
(assert (or (water 1) (water 2) (water 3) (water 4) (water 5)))
; but not more than one water house
(assert (not (and (water 1) (water 2))))
(assert (not (and (water 1) (water 3))))
(assert (not (and (water 1) (water 4))))
(assert (not (and (water 1) (water 5))))
(assert (not (and (water 2) (water 3))))
(assert (not (and (water 2) (water 4))))
(assert (not (and (water 2) (water 5))))
(assert (not (and (water 3) (water 4))))
(assert (not (and (water 3) (water 5))))
(assert (not (and (water 4) (water 5))))

; A house can only match one beverage proposition
(assert (not (and (beer 1) (coffee 1))))
(assert (not (and (beer 2) (coffee 2))))
(assert (not (and (beer 3) (coffee 3))))
(assert (not (and (beer 4) (coffee 4))))
(assert (not (and (beer 5) (coffee 5))))
(assert (not (and (beer 1) (milk 1))))
(assert (not (and (beer 2) (milk 2))))
(assert (not (and (beer 3) (milk 3))))
(assert (not (and (beer 4) (milk 4))))
(assert (not (and (beer 5) (milk 5))))
(assert (not (and (beer 1) (tea 1))))
(assert (not (and (beer 2) (tea 2))))
(assert (not (and (beer 3) (tea 3))))
(assert (not (and (beer 4) (tea 4))))
(assert (not (and (beer 5) (tea 5))))
(assert (not (and (beer 1) (water 1))))
(assert (not (and (beer 2) (water 2))))
(assert (not (and (beer 3) (water 3))))
(assert (not (and (beer 4) (water 4))))
(assert (not (and (beer 5) (water 5))))
(assert (not (and (coffee 1) (beer 1))))
(assert (not (and (coffee 2) (beer 2))))
(assert (not (and (coffee 3) (beer 3))))
(assert (not (and (coffee 4) (beer 4))))
(assert (not (and (coffee 5) (beer 5))))
(assert (not (and (coffee 1) (milk 1))))
(assert (not (and (coffee 2) (milk 2))))
(assert (not (and (coffee 3) (milk 3))))
(assert (not (and (coffee 4) (milk 4))))
(assert (not (and (coffee 5) (milk 5))))
(assert (not (and (coffee 1) (tea 1))))
(assert (not (and (coffee 2) (tea 2))))
(assert (not (and (coffee 3) (tea 3))))
(assert (not (and (coffee 4) (tea 4))))
(assert (not (and (coffee 5) (tea 5))))
(assert (not (and (coffee 1) (water 1))))
(assert (not (and (coffee 2) (water 2))))
(assert (not (and (coffee 3) (water 3))))
(assert (not (and (coffee 4) (water 4))))
(assert (not (and (coffee 5) (water 5))))
(assert (not (and (milk 1) (beer 1))))
(assert (not (and (milk 2) (beer 2))))
(assert (not (and (milk 3) (beer 3))))
(assert (not (and (milk 4) (beer 4))))
(assert (not (and (milk 5) (beer 5))))
(assert (not (and (milk 1) (coffee 1))))
(assert (not (and (milk 2) (coffee 2))))
(assert (not (and (milk 3) (coffee 3))))
(assert (not (and (milk 4) (coffee 4))))
(assert (not (and (milk 5) (coffee 5))))
(assert (not (and (milk 1) (tea 1))))
(assert (not (and (milk 2) (tea 2))))
(assert (not (and (milk 3) (tea 3))))
(assert (not (and (milk 4) (tea 4))))
(assert (not (and (milk 5) (tea 5))))
(assert (not (and (milk 1) (water 1))))
(assert (not (and (milk 2) (water 2))))
(assert (not (and (milk 3) (water 3))))
(assert (not (and (milk 4) (water 4))))
(assert (not (and (milk 5) (water 5))))
(assert (not (and (tea 1) (beer 1))))
(assert (not (and (tea 2) (beer 2))))
(assert (not (and (tea 3) (beer 3))))
(assert (not (and (tea 4) (beer 4))))
(assert (not (and (tea 5) (beer 5))))
(assert (not (and (tea 1) (coffee 1))))
(assert (not (and (tea 2) (coffee 2))))
(assert (not (and (tea 3) (coffee 3))))
(assert (not (and (tea 4) (coffee 4))))
(assert (not (and (tea 5) (coffee 5))))
(assert (not (and (tea 1) (milk 1))))
(assert (not (and (tea 2) (milk 2))))
(assert (not (and (tea 3) (milk 3))))
(assert (not (and (tea 4) (milk 4))))
(assert (not (and (tea 5) (milk 5))))
(assert (not (and (tea 1) (water 1))))
(assert (not (and (tea 2) (water 2))))
(assert (not (and (tea 3) (water 3))))
(assert (not (and (tea 4) (water 4))))
(assert (not (and (tea 5) (water 5))))
(assert (not (and (water 1) (beer 1))))
(assert (not (and (water 2) (beer 2))))
(assert (not (and (water 3) (beer 3))))
(assert (not (and (water 4) (beer 4))))
(assert (not (and (water 5) (beer 5))))
(assert (not (and (water 1) (coffee 1))))
(assert (not (and (water 2) (coffee 2))))
(assert (not (and (water 3) (coffee 3))))
(assert (not (and (water 4) (coffee 4))))
(assert (not (and (water 5) (coffee 5))))
(assert (not (and (water 1) (milk 1))))
(assert (not (and (water 2) (milk 2))))
(assert (not (and (water 3) (milk 3))))
(assert (not (and (water 4) (milk 4))))
(assert (not (and (water 5) (milk 5))))
(assert (not (and (water 1) (tea 1))))
(assert (not (and (water 2) (tea 2))))
(assert (not (and (water 3) (tea 3))))
(assert (not (and (water 4) (tea 4))))
(assert (not (and (water 5) (tea 5))))

; at least one bluemaster house
(assert (or (bluemaster 1) (bluemaster 2) (bluemaster 3) (bluemaster 4) (bluemaster 5)))
; but not more than one bluemaster house
(assert (not (and (bluemaster 1) (bluemaster 2))))
(assert (not (and (bluemaster 1) (bluemaster 3))))
(assert (not (and (bluemaster 1) (bluemaster 4))))
(assert (not (and (bluemaster 1) (bluemaster 5))))
(assert (not (and (bluemaster 2) (bluemaster 3))))
(assert (not (and (bluemaster 2) (bluemaster 4))))
(assert (not (and (bluemaster 2) (bluemaster 5))))
(assert (not (and (bluemaster 3) (bluemaster 4))))
(assert (not (and (bluemaster 3) (bluemaster 5))))
(assert (not (and (bluemaster 4) (bluemaster 5))))

; at least one dunhill house
(assert (or (dunhill 1) (dunhill 2) (dunhill 3) (dunhill 4) (dunhill 5)))
; but not more than one dunhill house
(assert (not (and (dunhill 1) (dunhill 2))))
(assert (not (and (dunhill 1) (dunhill 3))))
(assert (not (and (dunhill 1) (dunhill 4))))
(assert (not (and (dunhill 1) (dunhill 5))))
(assert (not (and (dunhill 2) (dunhill 3))))
(assert (not (and (dunhill 2) (dunhill 4))))
(assert (not (and (dunhill 2) (dunhill 5))))
(assert (not (and (dunhill 3) (dunhill 4))))
(assert (not (and (dunhill 3) (dunhill 5))))
(assert (not (and (dunhill 4) (dunhill 5))))

; at least one pallmall house
(assert (or (pallmall 1) (pallmall 2) (pallmall 3) (pallmall 4) (pallmall 5)))
; but not more than one pallmall house
(assert (not (and (pallmall 1) (pallmall 2))))
(assert (not (and (pallmall 1) (pallmall 3))))
(assert (not (and (pallmall 1) (pallmall 4))))
(assert (not (and (pallmall 1) (pallmall 5))))
(assert (not (and (pallmall 2) (pallmall 3))))
(assert (not (and (pallmall 2) (pallmall 4))))
(assert (not (and (pallmall 2) (pallmall 5))))
(assert (not (and (pallmall 3) (pallmall 4))))
(assert (not (and (pallmall 3) (pallmall 5))))
(assert (not (and (pallmall 4) (pallmall 5))))

; at least one prince house
(assert (or (prince 1) (prince 2) (prince 3) (prince 4) (prince 5)))
; but not more than one prince house
(assert (not (and (prince 1) (prince 2))))
(assert (not (and (prince 1) (prince 3))))
(assert (not (and (prince 1) (prince 4))))
(assert (not (and (prince 1) (prince 5))))
(assert (not (and (prince 2) (prince 3))))
(assert (not (and (prince 2) (prince 4))))
(assert (not (and (prince 2) (prince 5))))
(assert (not (and (prince 3) (prince 4))))
(assert (not (and (prince 3) (prince 5))))
(assert (not (and (prince 4) (prince 5))))

; at least one blend house
(assert (or (blend 1) (blend 2) (blend 3) (blend 4) (blend 5)))
; but not more than one blend house
(assert (not (and (blend 1) (blend 2))))
(assert (not (and (blend 1) (blend 3))))
(assert (not (and (blend 1) (blend 4))))
(assert (not (and (blend 1) (blend 5))))
(assert (not (and (blend 2) (blend 3))))
(assert (not (and (blend 2) (blend 4))))
(assert (not (and (blend 2) (blend 5))))
(assert (not (and (blend 3) (blend 4))))
(assert (not (and (blend 3) (blend 5))))
(assert (not (and (blend 4) (blend 5))))

; A house can only match one cigar proposition
(assert (not (and (bluemaster 1) (dunhill 1))))
(assert (not (and (bluemaster 2) (dunhill 2))))
(assert (not (and (bluemaster 3) (dunhill 3))))
(assert (not (and (bluemaster 4) (dunhill 4))))
(assert (not (and (bluemaster 5) (dunhill 5))))
(assert (not (and (bluemaster 1) (pallmall 1))))
(assert (not (and (bluemaster 2) (pallmall 2))))
(assert (not (and (bluemaster 3) (pallmall 3))))
(assert (not (and (bluemaster 4) (pallmall 4))))
(assert (not (and (bluemaster 5) (pallmall 5))))
(assert (not (and (bluemaster 1) (prince 1))))
(assert (not (and (bluemaster 2) (prince 2))))
(assert (not (and (bluemaster 3) (prince 3))))
(assert (not (and (bluemaster 4) (prince 4))))
(assert (not (and (bluemaster 5) (prince 5))))
(assert (not (and (bluemaster 1) (blend 1))))
(assert (not (and (bluemaster 2) (blend 2))))
(assert (not (and (bluemaster 3) (blend 3))))
(assert (not (and (bluemaster 4) (blend 4))))
(assert (not (and (bluemaster 5) (blend 5))))
(assert (not (and (dunhill 1) (bluemaster 1))))
(assert (not (and (dunhill 2) (bluemaster 2))))
(assert (not (and (dunhill 3) (bluemaster 3))))
(assert (not (and (dunhill 4) (bluemaster 4))))
(assert (not (and (dunhill 5) (bluemaster 5))))
(assert (not (and (dunhill 1) (pallmall 1))))
(assert (not (and (dunhill 2) (pallmall 2))))
(assert (not (and (dunhill 3) (pallmall 3))))
(assert (not (and (dunhill 4) (pallmall 4))))
(assert (not (and (dunhill 5) (pallmall 5))))
(assert (not (and (dunhill 1) (prince 1))))
(assert (not (and (dunhill 2) (prince 2))))
(assert (not (and (dunhill 3) (prince 3))))
(assert (not (and (dunhill 4) (prince 4))))
(assert (not (and (dunhill 5) (prince 5))))
(assert (not (and (dunhill 1) (blend 1))))
(assert (not (and (dunhill 2) (blend 2))))
(assert (not (and (dunhill 3) (blend 3))))
(assert (not (and (dunhill 4) (blend 4))))
(assert (not (and (dunhill 5) (blend 5))))
(assert (not (and (pallmall 1) (bluemaster 1))))
(assert (not (and (pallmall 2) (bluemaster 2))))
(assert (not (and (pallmall 3) (bluemaster 3))))
(assert (not (and (pallmall 4) (bluemaster 4))))
(assert (not (and (pallmall 5) (bluemaster 5))))
(assert (not (and (pallmall 1) (dunhill 1))))
(assert (not (and (pallmall 2) (dunhill 2))))
(assert (not (and (pallmall 3) (dunhill 3))))
(assert (not (and (pallmall 4) (dunhill 4))))
(assert (not (and (pallmall 5) (dunhill 5))))
(assert (not (and (pallmall 1) (prince 1))))
(assert (not (and (pallmall 2) (prince 2))))
(assert (not (and (pallmall 3) (prince 3))))
(assert (not (and (pallmall 4) (prince 4))))
(assert (not (and (pallmall 5) (prince 5))))
(assert (not (and (pallmall 1) (blend 1))))
(assert (not (and (pallmall 2) (blend 2))))
(assert (not (and (pallmall 3) (blend 3))))
(assert (not (and (pallmall 4) (blend 4))))
(assert (not (and (pallmall 5) (blend 5))))
(assert (not (and (prince 1) (bluemaster 1))))
(assert (not (and (prince 2) (bluemaster 2))))
(assert (not (and (prince 3) (bluemaster 3))))
(assert (not (and (prince 4) (bluemaster 4))))
(assert (not (and (prince 5) (bluemaster 5))))
(assert (not (and (prince 1) (dunhill 1))))
(assert (not (and (prince 2) (dunhill 2))))
(assert (not (and (prince 3) (dunhill 3))))
(assert (not (and (prince 4) (dunhill 4))))
(assert (not (and (prince 5) (dunhill 5))))
(assert (not (and (prince 1) (pallmall 1))))
(assert (not (and (prince 2) (pallmall 2))))
(assert (not (and (prince 3) (pallmall 3))))
(assert (not (and (prince 4) (pallmall 4))))
(assert (not (and (prince 5) (pallmall 5))))
(assert (not (and (prince 1) (blend 1))))
(assert (not (and (prince 2) (blend 2))))
(assert (not (and (prince 3) (blend 3))))
(assert (not (and (prince 4) (blend 4))))
(assert (not (and (prince 5) (blend 5))))
(assert (not (and (blend 1) (bluemaster 1))))
(assert (not (and (blend 2) (bluemaster 2))))
(assert (not (and (blend 3) (bluemaster 3))))
(assert (not (and (blend 4) (bluemaster 4))))
(assert (not (and (blend 5) (bluemaster 5))))
(assert (not (and (blend 1) (dunhill 1))))
(assert (not (and (blend 2) (dunhill 2))))
(assert (not (and (blend 3) (dunhill 3))))
(assert (not (and (blend 4) (dunhill 4))))
(assert (not (and (blend 5) (dunhill 5))))
(assert (not (and (blend 1) (pallmall 1))))
(assert (not (and (blend 2) (pallmall 2))))
(assert (not (and (blend 3) (pallmall 3))))
(assert (not (and (blend 4) (pallmall 4))))
(assert (not (and (blend 5) (pallmall 5))))
(assert (not (and (blend 1) (prince 1))))
(assert (not (and (blend 2) (prince 2))))
(assert (not (and (blend 3) (prince 3))))
(assert (not (and (blend 4) (prince 4))))
(assert (not (and (blend 5) (prince 5))))

; at least one cat house
(assert (or (cat 1) (cat 2) (cat 3) (cat 4) (cat 5)))
; but not more than one cat house
(assert (not (and (cat 1) (cat 2))))
(assert (not (and (cat 1) (cat 3))))
(assert (not (and (cat 1) (cat 4))))
(assert (not (and (cat 1) (cat 5))))
(assert (not (and (cat 2) (cat 3))))
(assert (not (and (cat 2) (cat 4))))
(assert (not (and (cat 2) (cat 5))))
(assert (not (and (cat 3) (cat 4))))
(assert (not (and (cat 3) (cat 5))))
(assert (not (and (cat 4) (cat 5))))

; at least one bird house
(assert (or (bird 1) (bird 2) (bird 3) (bird 4) (bird 5)))
; but not more than one bird house
(assert (not (and (bird 1) (bird 2))))
(assert (not (and (bird 1) (bird 3))))
(assert (not (and (bird 1) (bird 4))))
(assert (not (and (bird 1) (bird 5))))
(assert (not (and (bird 2) (bird 3))))
(assert (not (and (bird 2) (bird 4))))
(assert (not (and (bird 2) (bird 5))))
(assert (not (and (bird 3) (bird 4))))
(assert (not (and (bird 3) (bird 5))))
(assert (not (and (bird 4) (bird 5))))

; at least one dog house
(assert (or (dog 1) (dog 2) (dog 3) (dog 4) (dog 5)))
; but not more than one dog house
(assert (not (and (dog 1) (dog 2))))
(assert (not (and (dog 1) (dog 3))))
(assert (not (and (dog 1) (dog 4))))
(assert (not (and (dog 1) (dog 5))))
(assert (not (and (dog 2) (dog 3))))
(assert (not (and (dog 2) (dog 4))))
(assert (not (and (dog 2) (dog 5))))
(assert (not (and (dog 3) (dog 4))))
(assert (not (and (dog 3) (dog 5))))
(assert (not (and (dog 4) (dog 5))))

; at least one fish house
(assert (or (fish 1) (fish 2) (fish 3) (fish 4) (fish 5)))
; but not more than one fish house
(assert (not (and (fish 1) (fish 2))))
(assert (not (and (fish 1) (fish 3))))
(assert (not (and (fish 1) (fish 4))))
(assert (not (and (fish 1) (fish 5))))
(assert (not (and (fish 2) (fish 3))))
(assert (not (and (fish 2) (fish 4))))
(assert (not (and (fish 2) (fish 5))))
(assert (not (and (fish 3) (fish 4))))
(assert (not (and (fish 3) (fish 5))))
(assert (not (and (fish 4) (fish 5))))

; at least one horse house
(assert (or (horse 1) (horse 2) (horse 3) (horse 4) (horse 5)))
; but not more than one horse house
(assert (not (and (horse 1) (horse 2))))
(assert (not (and (horse 1) (horse 3))))
(assert (not (and (horse 1) (horse 4))))
(assert (not (and (horse 1) (horse 5))))
(assert (not (and (horse 2) (horse 3))))
(assert (not (and (horse 2) (horse 4))))
(assert (not (and (horse 2) (horse 5))))
(assert (not (and (horse 3) (horse 4))))
(assert (not (and (horse 3) (horse 5))))
(assert (not (and (horse 4) (horse 5))))

; A house can only match one pet proposition
(assert (not (and (cat 1) (bird 1))))
(assert (not (and (cat 2) (bird 2))))
(assert (not (and (cat 3) (bird 3))))
(assert (not (and (cat 4) (bird 4))))
(assert (not (and (cat 5) (bird 5))))
(assert (not (and (cat 1) (dog 1))))
(assert (not (and (cat 2) (dog 2))))
(assert (not (and (cat 3) (dog 3))))
(assert (not (and (cat 4) (dog 4))))
(assert (not (and (cat 5) (dog 5))))
(assert (not (and (cat 1) (fish 1))))
(assert (not (and (cat 2) (fish 2))))
(assert (not (and (cat 3) (fish 3))))
(assert (not (and (cat 4) (fish 4))))
(assert (not (and (cat 5) (fish 5))))
(assert (not (and (cat 1) (horse 1))))
(assert (not (and (cat 2) (horse 2))))
(assert (not (and (cat 3) (horse 3))))
(assert (not (and (cat 4) (horse 4))))
(assert (not (and (cat 5) (horse 5))))
(assert (not (and (bird 1) (cat 1))))
(assert (not (and (bird 2) (cat 2))))
(assert (not (and (bird 3) (cat 3))))
(assert (not (and (bird 4) (cat 4))))
(assert (not (and (bird 5) (cat 5))))
(assert (not (and (bird 1) (dog 1))))
(assert (not (and (bird 2) (dog 2))))
(assert (not (and (bird 3) (dog 3))))
(assert (not (and (bird 4) (dog 4))))
(assert (not (and (bird 5) (dog 5))))
(assert (not (and (bird 1) (fish 1))))
(assert (not (and (bird 2) (fish 2))))
(assert (not (and (bird 3) (fish 3))))
(assert (not (and (bird 4) (fish 4))))
(assert (not (and (bird 5) (fish 5))))
(assert (not (and (bird 1) (horse 1))))
(assert (not (and (bird 2) (horse 2))))
(assert (not (and (bird 3) (horse 3))))
(assert (not (and (bird 4) (horse 4))))
(assert (not (and (bird 5) (horse 5))))
(assert (not (and (dog 1) (cat 1))))
(assert (not (and (dog 2) (cat 2))))
(assert (not (and (dog 3) (cat 3))))
(assert (not (and (dog 4) (cat 4))))
(assert (not (and (dog 5) (cat 5))))
(assert (not (and (dog 1) (bird 1))))
(assert (not (and (dog 2) (bird 2))))
(assert (not (and (dog 3) (bird 3))))
(assert (not (and (dog 4) (bird 4))))
(assert (not (and (dog 5) (bird 5))))
(assert (not (and (dog 1) (fish 1))))
(assert (not (and (dog 2) (fish 2))))
(assert (not (and (dog 3) (fish 3))))
(assert (not (and (dog 4) (fish 4))))
(assert (not (and (dog 5) (fish 5))))
(assert (not (and (dog 1) (horse 1))))
(assert (not (and (dog 2) (horse 2))))
(assert (not (and (dog 3) (horse 3))))
(assert (not (and (dog 4) (horse 4))))
(assert (not (and (dog 5) (horse 5))))
(assert (not (and (fish 1) (cat 1))))
(assert (not (and (fish 2) (cat 2))))
(assert (not (and (fish 3) (cat 3))))
(assert (not (and (fish 4) (cat 4))))
(assert (not (and (fish 5) (cat 5))))
(assert (not (and (fish 1) (bird 1))))
(assert (not (and (fish 2) (bird 2))))
(assert (not (and (fish 3) (bird 3))))
(assert (not (and (fish 4) (bird 4))))
(assert (not (and (fish 5) (bird 5))))
(assert (not (and (fish 1) (dog 1))))
(assert (not (and (fish 2) (dog 2))))
(assert (not (and (fish 3) (dog 3))))
(assert (not (and (fish 4) (dog 4))))
(assert (not (and (fish 5) (dog 5))))
(assert (not (and (fish 1) (horse 1))))
(assert (not (and (fish 2) (horse 2))))
(assert (not (and (fish 3) (horse 3))))
(assert (not (and (fish 4) (horse 4))))
(assert (not (and (fish 5) (horse 5))))
(assert (not (and (horse 1) (cat 1))))
(assert (not (and (horse 2) (cat 2))))
(assert (not (and (horse 3) (cat 3))))
(assert (not (and (horse 4) (cat 4))))
(assert (not (and (horse 5) (cat 5))))
(assert (not (and (horse 1) (bird 1))))
(assert (not (and (horse 2) (bird 2))))
(assert (not (and (horse 3) (bird 3))))
(assert (not (and (horse 4) (bird 4))))
(assert (not (and (horse 5) (bird 5))))
(assert (not (and (horse 1) (dog 1))))
(assert (not (and (horse 2) (dog 2))))
(assert (not (and (horse 3) (dog 3))))
(assert (not (and (horse 4) (dog 4))))
(assert (not (and (horse 5) (dog 5))))
(assert (not (and (horse 1) (fish 1))))
(assert (not (and (horse 2) (fish 2))))
(assert (not (and (horse 3) (fish 3))))
(assert (not (and (horse 4) (fish 4))))
(assert (not (and (horse 5) (fish 5))))

;1. The Brit lives in a Red house.
(assert (iff (brit 1) (red 1)))
(assert (iff (brit 2) (red 2)))
(assert (iff (brit 3) (red 3)))
(assert (iff (brit 4) (red 4)))
(assert (iff (brit 5) (red 5)))

;2. The Swede keeps Dogs as pets.
(assert (iff (swede 1) (dog 1)))
(assert (iff (swede 2) (dog 2)))
(assert (iff (swede 3) (dog 3)))
(assert (iff (swede 4) (dog 4)))
(assert (iff (swede 5) (dog 5)))

;3. The Dane drinks Tea.
(assert (iff (dane 1) (tea 1)))
(assert (iff (dane 2) (tea 2)))
(assert (iff (dane 3) (tea 3)))
(assert (iff (dane 4) (tea 4)))
(assert (iff (dane 5) (tea 5)))

;4. The Green house is on the left of the White house.
(assert (or
    (and (green 1) (white 2))
    (and (green 2) (white 3))
    (and (green 3) (white 4))
    (and (green 4) (white 5))
))

;5. The Green house owner drinks Coffee.
(assert (iff (green 1) (coffee 1)))
(assert (iff (green 2) (coffee 2)))
(assert (iff (green 3) (coffee 3)))
(assert (iff (green 4) (coffee 4)))
(assert (iff (green 5) (coffee 5)))

;6. The owner who smokes Pall Mall rears Birds.
(assert (iff (pallmall 1) (bird 1)))
(assert (iff (pallmall 2) (bird 2)))
(assert (iff (pallmall 3) (bird 3)))
(assert (iff (pallmall 4) (bird 4)))
(assert (iff (pallmall 5) (bird 5)))

;7. The owner of the Yellow house smokes Dunhill.
(assert (iff (yellow 1) (dunhill 1)))
(assert (iff (yellow 2) (dunhill 2)))
(assert (iff (yellow 3) (dunhill 3)))
(assert (iff (yellow 4) (dunhill 4)))
(assert (iff (yellow 5) (dunhill 5)))

;8. The owner living in the center house drinks Milk.
(assert (milk 3))

;9. The Norwegian lives in the first house.
(assert (norwegian 1))

;10. The owner who smokes Blend lives next to the one who keeps Cats.
(assert (or
    (and (blend 1) (cat 2))
    (and (blend 2) (cat 1))
    (and (blend 2) (cat 3))
    (and (blend 3) (cat 2))
    (and (blend 3) (cat 4))
    (and (blend 4) (cat 3))
    (and (blend 4) (cat 5))
    (and (blend 5) (cat 4))))

;11. The owner who keeps horses lives next to the man who smokes Dunhill.
(assert (or
    (and (horse 1) (dunhill 2))
    (and (horse 2) (dunhill 1))
    (and (horse 2) (dunhill 3))
    (and (horse 3) (dunhill 2))
    (and (horse 3) (dunhill 4))
    (and (horse 4) (dunhill 3))
    (and (horse 4) (dunhill 5))
    (and (horse 5) (dunhill 4))))

;12. The owner who smokes Bluemaster drinks Beer.
(assert (iff (bluemaster 1) (beer 1)))
(assert (iff (bluemaster 2) (beer 2)))
(assert (iff (bluemaster 3) (beer 3)))
(assert (iff (bluemaster 4) (beer 4)))
(assert (iff (bluemaster 5) (beer 5)))

;13. The German smokes Prince.
(assert (iff (german 1) (prince 1)))
(assert (iff (german 2) (prince 2)))
(assert (iff (german 3) (prince 3)))
(assert (iff (german 4) (prince 4)))
(assert (iff (german 5) (prince 5)))

;14. The Norwegian lives next to the Blue house.
(assert (or
    (and (norwegian 1) (blue 2))
    (and (norwegian 2) (blue 1))
    (and (norwegian 2) (blue 3))
    (and (norwegian 3) (blue 2))
    (and (norwegian 3) (blue 4))
    (and (norwegian 4) (blue 3))
    (and (norwegian 4) (blue 5))
    (and (norwegian 5) (blue 4))))

;15. The owner who smokes Blend has a neighbor who drinks Water.
(assert (or
    (and (blend 1) (water 2))
    (and (blend 2) (water 1))
    (and (blend 2) (water 3))
    (and (blend 3) (water 2))
    (and (blend 3) (water 4))
    (and (blend 4) (water 3))
    (and (blend 4) (water 5))
    (and (blend 5) (water 4))))

(declare-const owns_fish Int)
(assert (fish owns_fish))
(assert (or
(= 1 owns_fish)
(= 2 owns_fish)
(= 3 owns_fish)
(= 4 owns_fish)
(= 5 owns_fish)
))

(declare-const natl_owns_fish String)
(assert (= natl_owns_fish
    (ite (brit owns_fish) "brit"
    (ite (dane owns_fish) "dane"
    (ite (german owns_fish) "german"
    (ite (norwegian owns_fish) "norwegian" "swede"))))
))

(check-sat)
(get-model)

;(eval owns_fish) ; displays '4' when run
(eval natl_owns_fish) ; 'german'
